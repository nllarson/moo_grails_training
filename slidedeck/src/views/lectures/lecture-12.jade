doctype html
include ../includes/mixins

+page("Lecture 12 - Services")
  +lecture-title-page("Services", "Lecture 12")

  section
    h2 Services???
    ul
      li the meat and potatoes of your application
      li where your business logic lives
      li promotes reuse
      li transaction boundry
      li clean separation of concerns

  section
    h2 Dependency Injection
    ul
      li Grails supports "dependency injection by convention"
      li Uses the property name representation of the class
      li Can be injected into controllers, tag libraries, etc.
    pre.
      <code class="groovy">
      class EmployeeController {
        def employeeService
      }
      </code>

  section
    h2 Scopes
    ul
      li <b>prototype</b> - A new service is created every time it is injected into another class
      li <b>request</b> - A new service will be created per request
      li <b>flash</b> - A new service will be created for the current and next request only
      li <b>flow</b> - In web flows the service will exist for the scope of the flow
      li <b>conversation</b> - In web flows the service will exist for the scope of the conversation. ie a root flow and its sub flows
      li <b>session</b> - A service is created for the scope of a user session
      li <b>singleton</b> (default) - Only one instance of the service ever exists

  section
    h2 Transactions
    ul
      li All services are Transactional by default
      li Automatic rollback occurs if a method throws a runtime exception
      li To turn off transactions in your service:
      ul
        li
          pre.
            <code class="groovy">
            static transactional = false
            </code>

  section
    h2 Transaction
    ul
      li A common use case is to rollback a transaction when a validation error occurs.
    pre.
      <code class="groovy">
      class EmployeeService {
        void updatePassword(id, String password) {
          def employee = Employee.get(id)
          employee.password = password
          if (!employee.validate()){
            throw new ValidationException("Password is not valid", employee.errors)
          }
        }
      }
      </code>

  +lecture-title-page("Lab 14", "Services")      
